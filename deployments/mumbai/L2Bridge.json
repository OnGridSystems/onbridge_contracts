{
  "address": "0xF6C9DaF74f99388c2C666b0468a9f1D1601c0013",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "_l1Token",
          "type": "address"
        },
        {
          "internalType": "contract IERC721Bridged",
          "name": "_l2Token",
          "type": "address"
        },
        {
          "internalType": "contract IDeBridgeGate",
          "name": "_deBridgeGate",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AddressAlreadyAdded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AdminBadRole",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CallProxyBadRole",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ChainToIsNotSupported",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "nativeSender",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "chainIdFrom",
          "type": "uint256"
        }
      ],
      "name": "NativeSenderBadRole",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RemovingMissingAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainIdTo",
          "type": "uint256"
        }
      ],
      "name": "ContractAddressOnChainIdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "nativeSender",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainIdFrom",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "ControllingAddressUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "_l1Tx",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "DepositFinalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalInitiated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_nativeSender",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_chainIdFrom",
          "type": "uint256"
        }
      ],
      "name": "addControllingAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "chainIdToContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deBridgeGate",
      "outputs": [
        {
          "internalType": "contract IDeBridgeGate",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_l1Tx",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "finalizeInboundTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "cid",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "getDebridgeId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "isAddressFromChainIdControlling",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_nativeSender",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_chainIdFrom",
          "type": "uint256"
        }
      ],
      "name": "isControllingAddress",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1Token",
      "outputs": [
        {
          "internalType": "contract IERC721",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2Token",
      "outputs": [
        {
          "internalType": "contract IERC721Bridged",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_chainIdTo",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_fallback",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_executionFee",
          "type": "uint256"
        }
      ],
      "name": "outboundTransfer",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_nativeSender",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_chainIdFrom",
          "type": "uint256"
        }
      ],
      "name": "removeControllingAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_chainIdTo",
          "type": "uint256"
        }
      ],
      "name": "setContractAddressOnChainId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x1c92910eeec16fd8cc294bafa1fd65faec72906a1262c447f1a285ee2720c138",
  "receipt": {
    "to": null,
    "from": "0x5fCb8f7149E8aD03544157C90E6f81b26933d3a2",
    "contractAddress": "0xF6C9DaF74f99388c2C666b0468a9f1D1601c0013",
    "transactionIndex": 0,
    "gasUsed": "1581859",
    "logsBloom": "0x
    "blockHash": "0x1acbb6402a6d654a8505c2d0a55ed40810e180ba4b7dc3f12b2e7ce08dde727d",
    "transactionHash": "0x1c92910eeec16fd8cc294bafa1fd65faec72906a1262c447f1a285ee2720c138",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 24965926,
        "transactionHash": "0x1c92910eeec16fd8cc294bafa1fd65faec72906a1262c447f1a285ee2720c138",
        "address": "0xF6C9DaF74f99388c2C666b0468a9f1D1601c0013",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005fcb8f7149e8ad03544157c90e6f81b26933d3a2",
          "0x0000000000000000000000005fcb8f7149e8ad03544157c90e6f81b26933d3a2"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x1acbb6402a6d654a8505c2d0a55ed40810e180ba4b7dc3f12b2e7ce08dde727d"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 24965926,
        "transactionHash": "0x1c92910eeec16fd8cc294bafa1fd65faec72906a1262c447f1a285ee2720c138",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005fcb8f7149e8ad03544157c90e6f81b26933d3a2",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000002cf589fd63b3c50000000000000000000000000000000000000000000000007ad763301b622f3f0000000000000000000000000000000000000000000006f3ab04b5edc087bb330000000000000000000000000000000000000000000000007aaa6da61dfe7b7a0000000000000000000000000000000000000000000006f3ab31ab77bdeb6ef8",
        "logIndex": 1,
        "blockHash": "0x1acbb6402a6d654a8505c2d0a55ed40810e180ba4b7dc3f12b2e7ce08dde727d"
      }
    ],
    "blockNumber": 24965926,
    "cumulativeGasUsed": "1581859",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe6847645B1832B2923e5938ec482f2b0EfA6DE4c",
    "0xc303c254529542bfCbCCE275Bb8c819fD8fFdb03",
    "0x68D936Cb4723BdD38C488FD50514803f96789d2D"
  ],
  "solcInputHash": "9f3def146569bfefe4ca0c2bc30349b0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_l1Token\",\"type\":\"address\"},{\"internalType\":\"contract IERC721Bridged\",\"name\":\"_l2Token\",\"type\":\"address\"},{\"internalType\":\"contract IDeBridgeGate\",\"name\":\"_deBridgeGate\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddressAlreadyAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AdminBadRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallProxyBadRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ChainToIsNotSupported\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"nativeSender\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"chainIdFrom\",\"type\":\"uint256\"}],\"name\":\"NativeSenderBadRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RemovingMissingAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainIdTo\",\"type\":\"uint256\"}],\"name\":\"ContractAddressOnChainIdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"nativeSender\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainIdFrom\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"ControllingAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_l1Tx\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"DepositFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"WithdrawalInitiated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_nativeSender\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_chainIdFrom\",\"type\":\"uint256\"}],\"name\":\"addControllingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"chainIdToContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deBridgeGate\",\"outputs\":[{\"internalType\":\"contract IDeBridgeGate\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_l1Tx\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"finalizeInboundTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getDebridgeId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"isAddressFromChainIdControlling\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_nativeSender\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_chainIdFrom\",\"type\":\"uint256\"}],\"name\":\"isControllingAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1Token\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2Token\",\"outputs\":[{\"internalType\":\"contract IERC721Bridged\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_chainIdTo\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_fallback\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_executionFee\",\"type\":\"uint256\"}],\"name\":\"outboundTransfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_nativeSender\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_chainIdFrom\",\"type\":\"uint256\"}],\"name\":\"removeControllingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_chainIdTo\",\"type\":\"uint256\"}],\"name\":\"setContractAddressOnChainId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"OnBridge IO*\",\"details\":\"This contract deployed on secondary network with Bridged token contract - upon `finalizeInboundTransfer` call from oracle, it mints corresponding amount of tokens on Layer 2 network - upon `outboundTransfer` call from token holder it withdraws and burns L2 the requested token\",\"kind\":\"dev\",\"methods\":{\"finalizeInboundTransfer(address,string,uint256)\":{\"params\":{\"_id\":\"Token id being deposited\",\"_l1Tx\":\"Tx hash of `L1Bridge.outboundTransfer` on L1 side\",\"_to\":\"L2 address of destination\"}},\"getChainId()\":{\"details\":\"Get current chain id\"},\"getDebridgeId(uint256,address)\":{\"details\":\"Calculates asset identifier.\",\"params\":{\"_chainId\":\"Current chain id.\",\"_tokenAddress\":\"Address of the asset on the other chain.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"outboundTransfer(address,uint256,uint256,address,uint256)\":{\"params\":{\"_id\":\"Token id being withdrawn\",\"_to\":\"L1 address of destination\"}},\"pause()\":{\"details\":\"Stop all transfers.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"unpause()\":{\"details\":\"Allow transfers.\"}},\"title\":\"Bridge Layer 2 contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"finalizeInboundTransfer(address,string,uint256)\":{\"notice\":\"Finalizes a deposit from L1 to L2\"},\"outboundTransfer(address,uint256,uint256,address,uint256)\":{\"notice\":\"Initiates a withdrawal from L2 to L1; callable by any tokenholder.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/L2Bridge.sol\":\"L2Bridge\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x64bb2dbe7ec4fcadb2f163f41edf6f2e1cd8f16162f7a56c2581894e6ba0747c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf93da311a3b34a8363a759c404d575746fa38351fb29ecd646c608e27219ebec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcd98895383d51dc86669a76ae3ad4419fc5dc079d01faea23498e80c1cf9f78a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/BridgeAppBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"./interfaces/ICallProxy.sol\\\";\\nimport \\\"./forkedInterfaces/IDeBridgeGate.sol\\\";\\nimport \\\"./libraries/Flags.sol\\\";\\n\\nabstract contract BridgeAppBase is\\n    Initializable,\\n    AccessControlUpgradeable,\\n    PausableUpgradeable\\n{\\n    using AddressUpgradeable for address payable;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    IDeBridgeGate public deBridgeGate;\\n\\n    // chainId => (address => isControlling)\\n    /// @dev Maps chainId and address on that chain to bool that defines if the address is controlling\\n    /// Controlling address is the one that is allowed to call the contract\\n    /// By default it should be this contract address on sending chain and may be another depending\\n    /// on the contract logic\\n    mapping(uint256 => mapping(bytes => bool))\\n        public isAddressFromChainIdControlling;\\n    /// @dev Maps chainId to address of this contract on that chain\\n    mapping(uint256 => address) public chainIdToContractAddress;\\n\\n    /* ========== ERRORS ========== */\\n\\n    error CallProxyBadRole();\\n    error NativeSenderBadRole(bytes nativeSender, uint256 chainIdFrom);\\n\\n    error AddressAlreadyAdded();\\n    error RemovingMissingAddress();\\n    error AdminBadRole();\\n\\n    error ChainToIsNotSupported();\\n\\n    /* ========== EVENTS ========== */\\n\\n    // emitted when controlling address is updated\\n    event ControllingAddressUpdated(\\n        bytes nativeSender,\\n        uint256 chainIdFrom,\\n        bool enabled\\n    );\\n\\n    // emitted when chainIdToContractAddress address is updated\\n    event ContractAddressOnChainIdUpdated(\\n        address newAddress,\\n        uint256 chainIdTo\\n    );\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyAdmin() {\\n        if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender)) revert AdminBadRole();\\n        _;\\n    }\\n\\n    modifier onlyControllingAddress() {\\n        ICallProxy callProxy = ICallProxy(deBridgeGate.callProxy());\\n        if (address(callProxy) != msg.sender) revert CallProxyBadRole();\\n\\n        bytes memory nativeSender = callProxy.submissionNativeSender();\\n        uint256 chainIdFrom = callProxy.submissionChainIdFrom();\\n        if (!isAddressFromChainIdControlling[chainIdFrom][nativeSender]) {\\n            revert NativeSenderBadRole(nativeSender, chainIdFrom);\\n        }\\n        _;\\n    }\\n\\n    /* ========== CONSTRUCTOR  ========== */\\n\\n    function __BridgeAppBase_init(IDeBridgeGate _deBridgeGate)\\n        internal\\n        initializer\\n    {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n        __Pausable_init_unchained();\\n        __BridgeAppBase_init_unchained(_deBridgeGate);\\n    }\\n\\n    function __BridgeAppBase_init_unchained(IDeBridgeGate _deBridgeGate)\\n        internal\\n        initializer\\n    {\\n        deBridgeGate = _deBridgeGate;\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function addControllingAddress(\\n        bytes memory _nativeSender,\\n        uint256 _chainIdFrom\\n    ) external onlyAdmin {\\n        if (isAddressFromChainIdControlling[_chainIdFrom][_nativeSender]) {\\n            revert AddressAlreadyAdded();\\n        }\\n\\n        isAddressFromChainIdControlling[_chainIdFrom][_nativeSender] = true;\\n\\n        emit ControllingAddressUpdated(_nativeSender, _chainIdFrom, true);\\n    }\\n\\n    function removeControllingAddress(\\n        bytes memory _nativeSender,\\n        uint256 _chainIdFrom\\n    ) external onlyAdmin {\\n        if (!isAddressFromChainIdControlling[_chainIdFrom][_nativeSender]) {\\n            revert RemovingMissingAddress();\\n        }\\n\\n        isAddressFromChainIdControlling[_chainIdFrom][_nativeSender] = false;\\n\\n        emit ControllingAddressUpdated(_nativeSender, _chainIdFrom, false);\\n    }\\n\\n    function setContractAddressOnChainId(address _address, uint256 _chainIdTo)\\n        external\\n        onlyAdmin\\n    {\\n        chainIdToContractAddress[_chainIdTo] = _address;\\n        emit ContractAddressOnChainIdUpdated(_address, _chainIdTo);\\n    }\\n\\n    /// @dev Stop all transfers.\\n    function pause() external onlyAdmin {\\n        _pause();\\n    }\\n\\n    /// @dev Allow transfers.\\n    function unpause() external onlyAdmin {\\n        _unpause();\\n    }\\n\\n    // ============ VIEWS ============\\n\\n    /// @dev Calculates asset identifier.\\n    /// @param _chainId Current chain id.\\n    /// @param _tokenAddress Address of the asset on the other chain.\\n    function getDebridgeId(uint256 _chainId, address _tokenAddress)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        return keccak256(abi.encodePacked(_chainId, _tokenAddress));\\n    }\\n\\n    function isControllingAddress(\\n        bytes memory _nativeSender,\\n        uint256 _chainIdFrom\\n    ) external view returns (bool) {\\n        return isAddressFromChainIdControlling[_chainIdFrom][_nativeSender];\\n    }\\n\\n    /// @dev Get current chain id\\n    function getChainId() public view virtual returns (uint256 cid) {\\n        assembly {\\n            cid := chainid()\\n        }\\n    }\\n\\n    // ============ Version Control ============\\n    function version() external pure returns (uint256) {\\n        return 101; // 1.0.1\\n    }\\n}\\n\",\"keccak256\":\"0xa58e8d96766e416fe42026a1bd5985d9ba1ec22fba500421eb629023d5fb22f0\",\"license\":\"MIT\"},\"contracts/L2Bridge.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\nimport \\\"./BridgeAppBase.sol\\\";\\nimport \\\"./forkedInterfaces/IDeBridgeGate.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC721} that allows to mint and destroy token\\n */\\ninterface IERC721Bridged is IERC721 {\\n    function mint(address to, uint256 id) external;\\n\\n    function burn(uint256 id) external;\\n}\\n\\n/**\\n * @title Bridge Layer 2 contract\\n * @dev This contract deployed on secondary network with Bridged token contract\\n * - upon `finalizeInboundTransfer` call from oracle, it mints corresponding amount of tokens on Layer 2 network\\n * - upon `outboundTransfer` call from token holder it withdraws and burns L2 the requested token\\n * @author OnBridge IO\\n **/\\n\\ncontract L2Bridge is BridgeAppBase {\\n    using Flags for uint256;\\n\\n    // Original token on L1 network (Ethereum mainnet #1)\\n    IERC721 public l1Token;\\n\\n    // L2 mintable + burnable token that acts as a twin of L1 asset\\n    IERC721Bridged public l2Token;\\n\\n    event WithdrawalInitiated(\\n        address l1Token,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 _id\\n    );\\n\\n    event DepositFinalized(\\n        address indexed l1Token,\\n        string indexed _l1Tx,\\n        address indexed _to,\\n        uint256 _id\\n    );\\n\\n    constructor(\\n        IERC721 _l1Token,\\n        IERC721Bridged _l2Token,\\n        IDeBridgeGate _deBridgeGate\\n    ) {\\n        require(address(_l1Token) != address(0), \\\"ZERO_TOKEN\\\");\\n        require(address(_l2Token) != address(0), \\\"ZERO_TOKEN\\\");\\n        require(address(_deBridgeGate) != address(0), \\\"ZERO_DEBRIDGEGATE\\\");\\n        l1Token = _l1Token;\\n        l2Token = _l2Token;\\n        deBridgeGate = _deBridgeGate;\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Finalizes a deposit from L1 to L2\\n     * @param _to L2 address of destination\\n     * @param _id Token id being deposited\\n     * @param _l1Tx Tx hash of `L1Bridge.outboundTransfer` on L1 side\\n     */\\n    function finalizeInboundTransfer(\\n        address _to,\\n        string memory _l1Tx,\\n        uint256 _id\\n    ) external onlyControllingAddress whenNotPaused {\\n        require(_to != address(0), \\\"Token cannot be the zero address\\\");\\n\\n        l2Token.mint(_to, _id);\\n        emit DepositFinalized(address(l1Token), _l1Tx, _to, _id);\\n    }\\n\\n    /**\\n     * @notice Initiates a withdrawal from L2 to L1; callable by any tokenholder.\\n     * @param _to L1 address of destination\\n     * @param _id Token id being withdrawn\\n     */\\n    function outboundTransfer(\\n        address _to,\\n        uint256 _id,\\n        uint256 _chainIdTo,\\n        address _fallback,\\n        uint256 _executionFee\\n    ) external payable whenNotPaused {\\n        address contractAddressTo = chainIdToContractAddress[_chainIdTo];\\n        if (contractAddressTo == address(0)) {\\n            revert ChainToIsNotSupported();\\n        }\\n\\n        l2Token.transferFrom(msg.sender, address(this), _id);\\n        l2Token.burn(_id);\\n        emit WithdrawalInitiated(address(l1Token), msg.sender, _to, _id);\\n\\n        IDeBridgeGate.SubmissionAutoParamsTo memory autoParams;\\n        autoParams.flags = autoParams.flags.setFlag(\\n            Flags.REVERT_IF_EXTERNAL_FAIL,\\n            true\\n        );\\n        autoParams.flags = autoParams.flags.setFlag(\\n            Flags.PROXY_WITH_SENDER,\\n            true\\n        );\\n        autoParams.executionFee = _executionFee;\\n        autoParams.fallbackAddress = abi.encodePacked(_fallback);\\n        autoParams.data = abi.encodeWithSignature(\\n            \\\"finalizeInboundTransfer(address,string,uint256)\\\",\\n            _to,\\n            \\\"\\\",\\n            _id\\n        );\\n\\n        deBridgeGate.send{value: msg.value}(\\n            address(0),\\n            msg.value,\\n            _chainIdTo,\\n            abi.encodePacked(contractAddressTo),\\n            \\\"\\\",\\n            false,\\n            0,\\n            abi.encode(autoParams)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x97ada60fe0e73571e6370f0b928404c73a4571afb44c3dcd22609c46f02f2d26\",\"license\":\"BSD-3-Clause\"},\"contracts/forkedInterfaces/IDeBridgeGate.sol\":{\"content\":\"/**\\nIt's a fork of IDeBridgeGate.sol with callProxy getter added\\nChanging original interface will change the bytecode which is not handled well by our deploy process\\nUntil a better solution is found this file will be used\\n*/\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IDeBridgeGate {\\n    /* ========== STRUCTS ========== */\\n\\n    struct TokenInfo {\\n        uint256 nativeChainId;\\n        bytes nativeAddress;\\n    }\\n\\n    struct DebridgeInfo {\\n        uint256 chainId; // native chain id\\n        uint256 maxAmount; // maximum amount to transfer\\n        uint256 balance; // total locked assets\\n        uint256 lockedInStrategies; // total locked assets in strategy (AAVE, Compound, etc)\\n        address tokenAddress; // asset address on the current chain\\n        uint16 minReservesBps; // minimal hot reserves in basis points (1/10000)\\n        bool exist;\\n    }\\n\\n    struct DebridgeFeeInfo {\\n        uint256 collectedFees; // total collected fees\\n        uint256 withdrawnFees; // fees that already withdrawn\\n        mapping(uint256 => uint256) getChainFee; // whether the chain for the asset is supported\\n    }\\n\\n    struct ChainSupportInfo {\\n        uint256 fixedNativeFee; // transfer fixed fee\\n        bool isSupported; // whether the chain for the asset is supported\\n        uint16 transferFeeBps; // transfer fee rate nominated in basis points (1/10000) of transferred amount\\n    }\\n\\n    struct DiscountInfo {\\n        uint16 discountFixBps; // fix discount in BPS\\n        uint16 discountTransferBps; // transfer % discount in BPS\\n    }\\n\\n    /// @param executionFee Fee paid to the transaction executor.\\n    /// @param fallbackAddress Receiver of the tokens if the call fails.\\n    struct SubmissionAutoParamsTo {\\n        uint256 executionFee;\\n        uint256 flags;\\n        bytes fallbackAddress;\\n        bytes data;\\n    }\\n\\n    /// @param executionFee Fee paid to the transaction executor.\\n    /// @param fallbackAddress Receiver of the tokens if the call fails.\\n    struct SubmissionAutoParamsFrom {\\n        uint256 executionFee;\\n        uint256 flags;\\n        address fallbackAddress;\\n        bytes data;\\n        bytes nativeSender;\\n    }\\n\\n    struct FeeParams {\\n        uint256 receivedAmount;\\n        uint256 fixFee;\\n        uint256 transferFee;\\n        bool useAssetFee;\\n        bool isNativeToken;\\n    }\\n\\n    /* ========== PUBLIC VARS GETTERS ========== */\\n    /// @dev Returns whether the transfer with the submissionId was claimed.\\n    /// submissionId is generated in getSubmissionIdFrom\\n    function isSubmissionUsed(bytes32 submissionId) external returns (bool);\\n\\n    /* ========== FUNCTIONS ========== */\\n\\n    /// @dev This method is used for the transfer of assets [from the native chain](https://docs.debridge.finance/the-core-protocol/transfers#transfer-from-native-chain).\\n    /// It locks an asset in the smart contract in the native chain and enables minting of deAsset on the secondary chain.\\n    /// @param _tokenAddress Asset identifier.\\n    /// @param _amount Amount to be transferred (note: the fee can be applied).\\n    /// @param _chainIdTo Chain id of the target chain.\\n    /// @param _receiver Receiver address.\\n    /// @param _permit deadline + signature for approving the spender by signature.\\n    /// @param _useAssetFee use assets fee for pay protocol fix (work only for specials token)\\n    /// @param _referralCode Referral code\\n    /// @param _autoParams Auto params for external call in target network\\n    function send(\\n        address _tokenAddress,\\n        uint256 _amount,\\n        uint256 _chainIdTo,\\n        bytes memory _receiver,\\n        bytes memory _permit,\\n        bool _useAssetFee,\\n        uint32 _referralCode,\\n        bytes calldata _autoParams\\n    ) external payable;\\n\\n    /// @dev Is used for transfers [into the native chain](https://docs.debridge.finance/the-core-protocol/transfers#transfer-from-secondary-chain-to-native-chain)\\n    /// to unlock the designated amount of asset from collateral and transfer it to the receiver.\\n    /// @param _debridgeId Asset identifier.\\n    /// @param _amount Amount of the transferred asset (note: the fee can be applied).\\n    /// @param _chainIdFrom Chain where submission was sent\\n    /// @param _receiver Receiver address.\\n    /// @param _nonce Submission id.\\n    /// @param _signatures Validators signatures to confirm\\n    /// @param _autoParams Auto params for external call\\n    function claim(\\n        bytes32 _debridgeId,\\n        uint256 _amount,\\n        uint256 _chainIdFrom,\\n        address _receiver,\\n        uint256 _nonce,\\n        bytes calldata _signatures,\\n        bytes calldata _autoParams\\n    ) external;\\n\\n    /// @dev Get a flash loan, msg.sender must implement IFlashCallback\\n    /// @param _tokenAddress An asset to loan\\n    /// @param _receiver Where funds should be sent\\n    /// @param _amount Amount to loan\\n    /// @param _data Data to pass to sender's flashCallback function\\n    function flash(\\n        address _tokenAddress,\\n        address _receiver,\\n        uint256 _amount,\\n        bytes memory _data\\n    ) external;\\n\\n    /// @dev Get reserves of a token available to use in defi\\n    /// @param _tokenAddress Token address\\n    function getDefiAvaliableReserves(address _tokenAddress) external view returns (uint256);\\n\\n    /// @dev Request the assets to be used in DeFi protocol.\\n    /// @param _tokenAddress Asset address.\\n    /// @param _amount Amount of tokens to request.\\n    function requestReserves(address _tokenAddress, uint256 _amount) external;\\n\\n    /// @dev Return the assets that were used in DeFi  protocol.\\n    /// @param _tokenAddress Asset address.\\n    /// @param _amount Amount of tokens to claim.\\n    function returnReserves(address _tokenAddress, uint256 _amount) external;\\n\\n    /// @dev Withdraw collected fees to feeProxy\\n    /// @param _debridgeId Asset identifier.\\n    function withdrawFee(bytes32 _debridgeId) external;\\n\\n    /// @dev Get native chain id and native address of a token\\n    /// @param currentTokenAddress address of a token on the current chain\\n    function getNativeTokenInfo(address currentTokenAddress)\\n    external\\n    view\\n    returns (uint256 chainId, bytes memory nativeAddress);\\n\\n    /// @dev Returns address of the proxy to execute user's calls.\\n    function callProxy() external view returns (address);\\n\\n    /// @dev Returns asset fixed fee value for specified debridge and chainId.\\n    /// @param _debridgeId Asset identifier.\\n    /// @param _chainId Chain id.\\n    function getDebridgeChainAssetFixedFee(\\n        bytes32 _debridgeId,\\n        uint256 _chainId\\n    ) external view returns (uint256);\\n\\n    /* ========== EVENTS ========== */\\n\\n    /// @dev Emitted once the tokens are sent from the original(native) chain to the other chain; the transfer tokens\\n    /// are expected to be claimed by the users.\\n    event Sent(\\n        bytes32 submissionId,\\n        bytes32 indexed debridgeId,\\n        uint256 amount,\\n        bytes receiver,\\n        uint256 nonce,\\n        uint256 indexed chainIdTo,\\n        uint32 referralCode,\\n        FeeParams feeParams,\\n        bytes autoParams,\\n        address nativeSender\\n    // bool isNativeToken //added to feeParams\\n    );\\n\\n    /// @dev Emitted once the tokens are transferred and withdrawn on a target chain\\n    event Claimed(\\n        bytes32 submissionId,\\n        bytes32 indexed debridgeId,\\n        uint256 amount,\\n        address indexed receiver,\\n        uint256 nonce,\\n        uint256 indexed chainIdFrom,\\n        bytes autoParams,\\n        bool isNativeToken\\n    );\\n\\n    /// @dev Emitted when new asset support is added.\\n    event PairAdded(\\n        bytes32 debridgeId,\\n        address tokenAddress,\\n        bytes nativeAddress,\\n        uint256 indexed nativeChainId,\\n        uint256 maxAmount,\\n        uint16 minReservesBps\\n    );\\n\\n    /// @dev Emitted when the asset is allowed/disallowed to be transferred to the chain.\\n    event ChainSupportUpdated(uint256 chainId, bool isSupported, bool isChainFrom);\\n    /// @dev Emitted when the supported chains are updated.\\n    event ChainsSupportUpdated(\\n        uint256 chainIds,\\n        ChainSupportInfo chainSupportInfo,\\n        bool isChainFrom);\\n\\n    /// @dev Emitted when the new call proxy is set.\\n    event CallProxyUpdated(address callProxy);\\n    /// @dev Emitted when the transfer request is executed.\\n    event AutoRequestExecuted(\\n        bytes32 submissionId,\\n        bool indexed success,\\n        address callProxy\\n    );\\n\\n    /// @dev Emitted when a submission is blocked.\\n    event Blocked(bytes32 submissionId);\\n    /// @dev Emitted when a submission is unblocked.\\n    event Unblocked(bytes32 submissionId);\\n\\n    /// @dev Emitted when a flash loan is successfully returned.\\n    event Flash(\\n        address sender,\\n        address indexed tokenAddress,\\n        address indexed receiver,\\n        uint256 amount,\\n        uint256 paid\\n    );\\n\\n    /// @dev Emitted when fee is withdrawn.\\n    event WithdrawnFee(bytes32 debridgeId, uint256 fee);\\n\\n    /// @dev Emitted when globalFixedNativeFee and globalTransferFeeBps are updated.\\n    event FixedNativeFeeUpdated(\\n        uint256 globalFixedNativeFee,\\n        uint256 globalTransferFeeBps);\\n\\n    /// @dev Emitted when globalFixedNativeFee is updated by feeContractUpdater\\n    event FixedNativeFeeAutoUpdated(uint256 globalFixedNativeFee);\\n}\\n\",\"keccak256\":\"0x133cf9943d6c078ed0031ec1a2909270e00c5cf993030ec8288cd6d4570c515d\",\"license\":\"MIT\"},\"contracts/interfaces/ICallProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface ICallProxy {\\n\\n    /// @dev Chain from which the current submission is received\\n    function submissionChainIdFrom() external returns (uint256);\\n    /// @dev Native sender of the current submission\\n    function submissionNativeSender() external returns (bytes memory);\\n\\n    /// @dev Used for calls where native asset transfer is involved.\\n    /// @param _reserveAddress Receiver of the tokens if the call to _receiver fails\\n    /// @param _receiver Contract to be called\\n    /// @param _data Call data\\n    /// @param _flags Flags to change certain behavior of this function, see Flags library for more details\\n    /// @param _nativeSender Native sender\\n    /// @param _chainIdFrom Id of a chain that originated the request\\n    function call(\\n        address _reserveAddress,\\n        address _receiver,\\n        bytes memory _data,\\n        uint256 _flags,\\n        bytes memory _nativeSender,\\n        uint256 _chainIdFrom\\n    ) external payable returns (bool);\\n\\n    /// @dev Used for calls where ERC20 transfer is involved.\\n    /// @param _token Asset address\\n    /// @param _reserveAddress Receiver of the tokens if the call to _receiver fails\\n    /// @param _receiver Contract to be called\\n    /// @param _data Call data\\n    /// @param _flags Flags to change certain behavior of this function, see Flags library for more details\\n    /// @param _nativeSender Native sender\\n    /// @param _chainIdFrom Id of a chain that originated the request\\n    function callERC20(\\n        address _token,\\n        address _reserveAddress,\\n        address _receiver,\\n        bytes memory _data,\\n        uint256 _flags,\\n        bytes memory _nativeSender,\\n        uint256 _chainIdFrom\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xf65148051efda1f4ae2a43aca96c14989c39fe70501015be885a94dc49bcb532\",\"license\":\"MIT\"},\"contracts/libraries/Flags.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.9;\\n\\nlibrary Flags {\\n\\n    /* ========== FLAGS ========== */\\n\\n    /// @dev Flag to unwrap ETH\\n    uint256 public constant UNWRAP_ETH = 0;\\n    /// @dev Flag to revert if external call fails\\n    uint256 public constant REVERT_IF_EXTERNAL_FAIL = 1;\\n    /// @dev Flag to call proxy with a sender contract\\n    uint256 public constant PROXY_WITH_SENDER = 2;\\n\\n    /// @dev Get flag\\n    /// @param _packedFlags Flags packed to uint256\\n    /// @param _flag Flag to check\\n    function getFlag(\\n        uint256 _packedFlags,\\n        uint256 _flag\\n    ) internal pure returns (bool) {\\n        uint256 flag = (_packedFlags >> _flag) & uint256(1);\\n        return flag == 1;\\n    }\\n\\n    /// @dev Set flag\\n    /// @param _packedFlags Flags packed to uint256\\n    /// @param _flag Flag to set\\n    /// @param _value Is set or not set\\n     function setFlag(\\n         uint256 _packedFlags,\\n         uint256 _flag,\\n         bool _value\\n     ) internal pure returns (uint256) {\\n         if (_value)\\n             return _packedFlags | uint256(1) << _flag;\\n         else\\n             return _packedFlags & ~(uint256(1) << _flag);\\n     }\\n}\\n\",\"keccak256\":\"0xc79114d41a3ac650c17ed02985e77d5d9b8916b461ca01fabbc1de9d4e98a84a\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001c6138038062001c6183398101604081905262000034916200022e565b6001600160a01b0383166200007d5760405162461bcd60e51b815260206004820152600a6024820152692d22a927afaa27a5a2a760b11b60448201526064015b60405180910390fd5b6001600160a01b038216620000c25760405162461bcd60e51b815260206004820152600a6024820152692d22a927afaa27a5a2a760b11b604482015260640162000074565b6001600160a01b0381166200010e5760405162461bcd60e51b81526020600482015260116024820152705a45524f5f44454252494447454741544560781b604482015260640162000074565b60cc80546001600160a01b038086166001600160a01b03199283161790925560cd805485841690831617905560c98054928416929091169190911790556200015860003362000161565b50505062000282565b6200016d828262000171565b5050565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff166200016d5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620001d13390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6001600160a01b03811681146200022b57600080fd5b50565b6000806000606084860312156200024457600080fd5b8351620002518162000215565b6020850151909350620002648162000215565b6040850151909250620002778162000215565b809150509250925092565b6119cf80620002926000396000f3fe60806040526004361061014b5760003560e01c80635c975abb116100b6578063a217fddf1161006f578063a217fddf146103c5578063c01e1bd6146103da578063ca777fbf146103fa578063cb0592941461041a578063d547741f14610450578063d72ce90e1461047057600080fd5b80635c975abb146103185780636586f26b146103305780638456cb591461035057806391d14854146103655780639682b90914610385578063a00461aa146103a557600080fd5b80633408e470116101085780633408e4701461026457806336568abe146102775780633f4ba83a146102975780635062a2b0146102ac57806354fd4d50146102cc57806356eff267146102e057600080fd5b806301ffc9a71461015057806306702db014610185578063248a9ca31461019a5780632c13e57c146101d85780632f2ff15d146101f857806330a37ce714610218575b600080fd5b34801561015c57600080fd5b5061017061016b36600461136a565b610490565b60405190151581526020015b60405180910390f35b6101986101933660046113ac565b6104c7565b005b3480156101a657600080fd5b506101ca6101b53660046113fe565b60009081526065602052604090206001015490565b60405190815260200161017c565b3480156101e457600080fd5b506101986101f33660046114e4565b6107f5565b34801561020457600080fd5b50610198610213366004611529565b6108ed565b34801561022457600080fd5b50610170610233366004611559565b60ca602090815260009283526040909220815180830184018051928152908401929093019190912091525460ff1681565b34801561027057600080fd5b50466101ca565b34801561028357600080fd5b50610198610292366004611529565b610918565b3480156102a357600080fd5b50610198610996565b3480156102b857600080fd5b506101706102c73660046114e4565b6109c8565b3480156102d857600080fd5b5060656101ca565b3480156102ec57600080fd5b5060cd54610300906001600160a01b031681565b6040516001600160a01b03909116815260200161017c565b34801561032457600080fd5b5060975460ff16610170565b34801561033c57600080fd5b5061019861034b3660046115a0565b6109ff565b34801561035c57600080fd5b50610198610a88565b34801561037157600080fd5b50610170610380366004611529565b610ab8565b34801561039157600080fd5b506101ca6103a0366004611529565b610ae3565b3480156103b157600080fd5b506101986103c03660046114e4565b610b2c565b3480156103d157600080fd5b506101ca600081565b3480156103e657600080fd5b5060cc54610300906001600160a01b031681565b34801561040657600080fd5b5060c954610300906001600160a01b031681565b34801561042657600080fd5b506103006104353660046113fe565b60cb602052600090815260409020546001600160a01b031681565b34801561045c57600080fd5b5061019861046b366004611529565b610c10565b34801561047c57600080fd5b5061019861048b3660046115cc565b610c36565b60006001600160e01b03198216637965db0b60e01b14806104c157506301ffc9a760e01b6001600160e01b03198316145b92915050565b60975460ff16156104f35760405162461bcd60e51b81526004016104ea90611639565b60405180910390fd5b600083815260cb60205260409020546001600160a01b03168061052957604051634325fa6b60e11b815260040160405180910390fd5b60cd546040516323b872dd60e01b8152336004820152306024820152604481018790526001600160a01b03909116906323b872dd90606401600060405180830381600087803b15801561057b57600080fd5b505af115801561058f573d6000803e3d6000fd5b505060cd54604051630852cd8d60e31b8152600481018990526001600160a01b0390911692506342966c689150602401600060405180830381600087803b1580156105d957600080fd5b505af11580156105ed573d6000803e3d6000fd5b505060cc54604080516001600160a01b039283168152602081018a9052918a1693503392507f2fc3848834aac8e883a2d2a17a7514dc4f2d3dd268089df9b9f5d918259ef3b0910160405180910390a36106686040518060800160405280600081526020016000815260200160608152602001606081525090565b602081015161067990600180610f6e565b6020820181905261068d9060026001610f6e565b6020828101919091528382526040516001600160601b0319606087901b169181019190915260340160408051601f1981840301815291815282810191909152516001600160a01b038816602482015260606044820152600060848201526064810187905260a40160408051601f19818403018152918152602080830180516001600160e01b0316636b96748760e11b179052606084019290925260c95490516001600160a01b039091169163be29747691349160009183918b91610766918a910160609190911b6001600160601b031916815260140190565b6040516020818303038152906040526000808960405160200161078991906116bf565b6040516020818303038152906040526040518963ffffffff1660e01b81526004016107ba9796959493929190611715565b6000604051808303818588803b1580156107d357600080fd5b505af11580156107e7573d6000803e3d6000fd5b505050505050505050505050565b610800600033610ab8565b61081d57604051636f4720fd60e11b815260040160405180910390fd5b600081815260ca602052604090819020905161083a90849061178b565b9081526040519081900360200190205460ff161561086b57604051631b42558760e21b815260040160405180910390fd5b600160ca60008381526020019081526020016000208360405161088e919061178b565b908152604051908190036020018120805492151560ff19909316929092179091557f75444ea1b32c6bc7d5884fdd431cab59bc347958a5a88eb42c31b1cd833f4c79906108e190849084906001906117a7565b60405180910390a15050565b6000828152606560205260409020600101546109098133610f92565b6109138383610ff6565b505050565b6001600160a01b03811633146109885760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016104ea565b610992828261107c565b5050565b6109a1600033610ab8565b6109be57604051636f4720fd60e11b815260040160405180910390fd5b6109c66110e3565b565b600081815260ca602052604080822090516109e490859061178b565b9081526040519081900360200190205460ff16905092915050565b610a0a600033610ab8565b610a2757604051636f4720fd60e11b815260040160405180910390fd5b600081815260cb602090815260409182902080546001600160a01b0319166001600160a01b03861690811790915582519081529081018390527f97eb0846ca97e409f9879b45a795fe55abf0dabdcf54c2bc4eaa07c14221195a91016108e1565b610a93600033610ab8565b610ab057604051636f4720fd60e11b815260040160405180910390fd5b6109c6611176565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60008282604051602001610b0e92919091825260601b6001600160601b031916602082015260340190565b60405160208183030381529060405280519060200120905092915050565b610b37600033610ab8565b610b5457604051636f4720fd60e11b815260040160405180910390fd5b600081815260ca6020526040908190209051610b7190849061178b565b9081526040519081900360200190205460ff16610ba1576040516336a2b46360e11b815260040160405180910390fd5b600081815260ca60205260408082209051610bbd90859061178b565b908152604051908190036020018120805492151560ff19909316929092179091557f75444ea1b32c6bc7d5884fdd431cab59bc347958a5a88eb42c31b1cd833f4c79906108e190849084906000906117a7565b600082815260656020526040902060010154610c2c8133610f92565b610913838361107c565b60c95460408051630b69a22b60e21b815290516000926001600160a01b031691632da688ac916004808301926020929190829003018186803b158015610c7b57600080fd5b505afa158015610c8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb391906117d1565b90506001600160a01b0381163314610cde576040516324439f6760e21b815260040160405180910390fd5b6000816001600160a01b0316632eb484916040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610d1b57600080fd5b505af1158015610d2f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d5791908101906117ee565b90506000826001600160a01b031663508ab0a06040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610d9657600080fd5b505af1158015610daa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dce919061185c565b905060ca600082815260200190815260200160002082604051610df1919061178b565b9081526040519081900360200190205460ff16610e25578181604051630792ddd560e11b81526004016104ea929190611875565b60975460ff1615610e485760405162461bcd60e51b81526004016104ea90611639565b6001600160a01b038616610e9e5760405162461bcd60e51b815260206004820181905260248201527f546f6b656e2063616e6e6f7420626520746865207a65726f206164647265737360448201526064016104ea565b60cd546040516340c10f1960e01b81526001600160a01b03888116600483015260248201879052909116906340c10f1990604401600060405180830381600087803b158015610eec57600080fd5b505af1158015610f00573d6000803e3d6000fd5b50505050856001600160a01b031685604051610f1c919061178b565b60405190819003812060cc5487835290916001600160a01b03909116907f446cb21a5a87b0b9b961eb4bb0b800e29accb236e438a2bc207ac4631a40c0959060200160405180910390a4505050505050565b60008115610f8257506001821b8317610f8b565b506001821b1983165b9392505050565b610f9c8282610ab8565b61099257610fb4816001600160a01b031660146111ce565b610fbf8360206111ce565b604051602001610fd0929190611897565b60408051601f198184030181529082905262461bcd60e51b82526104ea9160040161190c565b6110008282610ab8565b6109925760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556110383390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6110868282610ab8565b156109925760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60975460ff1661112c5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016104ea565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60975460ff16156111995760405162461bcd60e51b81526004016104ea90611639565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586111593390565b606060006111dd836002611935565b6111e8906002611954565b67ffffffffffffffff81111561120057611200611417565b6040519080825280601f01601f19166020018201604052801561122a576020820181803683370190505b509050600360fc1b816000815181106112455761124561196c565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106112745761127461196c565b60200101906001600160f81b031916908160001a9053506000611298846002611935565b6112a3906001611954565b90505b600181111561131b576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106112d7576112d761196c565b1a60f81b8282815181106112ed576112ed61196c565b60200101906001600160f81b031916908160001a90535060049490941c9361131481611982565b90506112a6565b508315610f8b5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104ea565b60006020828403121561137c57600080fd5b81356001600160e01b031981168114610f8b57600080fd5b6001600160a01b03811681146113a957600080fd5b50565b600080600080600060a086880312156113c457600080fd5b85356113cf81611394565b9450602086013593506040860135925060608601356113ed81611394565b949793965091946080013592915050565b60006020828403121561141057600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561145657611456611417565b604052919050565b600067ffffffffffffffff82111561147857611478611417565b50601f01601f191660200190565b60006114996114948461145e565b61142d565b90508281528383830111156114ad57600080fd5b828260208301376000602084830101529392505050565b600082601f8301126114d557600080fd5b610f8b83833560208501611486565b600080604083850312156114f757600080fd5b823567ffffffffffffffff81111561150e57600080fd5b61151a858286016114c4565b95602094909401359450505050565b6000806040838503121561153c57600080fd5b82359150602083013561154e81611394565b809150509250929050565b6000806040838503121561156c57600080fd5b82359150602083013567ffffffffffffffff81111561158a57600080fd5b611596858286016114c4565b9150509250929050565b600080604083850312156115b357600080fd5b82356115be81611394565b946020939093013593505050565b6000806000606084860312156115e157600080fd5b83356115ec81611394565b9250602084013567ffffffffffffffff81111561160857600080fd5b8401601f8101861361161957600080fd5b61162886823560208401611486565b925050604084013590509250925092565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60005b8381101561167e578181015183820152602001611666565b8381111561168d576000848401525b50505050565b600081518084526116ab816020860160208601611663565b601f01601f19169290920160200192915050565b60208152815160208201526020820151604082015260006040830151608060608401526116ef60a0840182611693565b90506060840151601f1984830301608085015261170c8282611693565b95945050505050565b600061010060018060a01b038a16835288602084015287604084015280606084015261174381840188611693565b90508281038060808501526000825286151560a085015263ffffffff861660c08501526020810160e08501525061177d6020820185611693565b9a9950505050505050505050565b6000825161179d818460208701611663565b9190910192915050565b6060815260006117ba6060830186611693565b602083019490945250901515604090910152919050565b6000602082840312156117e357600080fd5b8151610f8b81611394565b60006020828403121561180057600080fd5b815167ffffffffffffffff81111561181757600080fd5b8201601f8101841361182857600080fd5b80516118366114948261145e565b81815285602083850101111561184b57600080fd5b61170c826020830160208601611663565b60006020828403121561186e57600080fd5b5051919050565b6040815260006118886040830185611693565b90508260208301529392505050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516118cf816017850160208801611663565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351611900816028840160208801611663565b01602801949350505050565b602081526000610f8b6020830184611693565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561194f5761194f61191f565b500290565b600082198211156119675761196761191f565b500190565b634e487b7160e01b600052603260045260246000fd5b6000816119915761199161191f565b50600019019056fea26469706673582212201d554d191a14d8103b5464a2b7ba411144dd0a44fd33f9f888e1e8d0188037df64736f6c63430008090033",
  "deployedBytecode": "0x60806040526004361061014b5760003560e01c80635c975abb116100b6578063a217fddf1161006f578063a217fddf146103c5578063c01e1bd6146103da578063ca777fbf146103fa578063cb0592941461041a578063d547741f14610450578063d72ce90e1461047057600080fd5b80635c975abb146103185780636586f26b146103305780638456cb591461035057806391d14854146103655780639682b90914610385578063a00461aa146103a557600080fd5b80633408e470116101085780633408e4701461026457806336568abe146102775780633f4ba83a146102975780635062a2b0146102ac57806354fd4d50146102cc57806356eff267146102e057600080fd5b806301ffc9a71461015057806306702db014610185578063248a9ca31461019a5780632c13e57c146101d85780632f2ff15d146101f857806330a37ce714610218575b600080fd5b34801561015c57600080fd5b5061017061016b36600461136a565b610490565b60405190151581526020015b60405180910390f35b6101986101933660046113ac565b6104c7565b005b3480156101a657600080fd5b506101ca6101b53660046113fe565b60009081526065602052604090206001015490565b60405190815260200161017c565b3480156101e457600080fd5b506101986101f33660046114e4565b6107f5565b34801561020457600080fd5b50610198610213366004611529565b6108ed565b34801561022457600080fd5b50610170610233366004611559565b60ca602090815260009283526040909220815180830184018051928152908401929093019190912091525460ff1681565b34801561027057600080fd5b50466101ca565b34801561028357600080fd5b50610198610292366004611529565b610918565b3480156102a357600080fd5b50610198610996565b3480156102b857600080fd5b506101706102c73660046114e4565b6109c8565b3480156102d857600080fd5b5060656101ca565b3480156102ec57600080fd5b5060cd54610300906001600160a01b031681565b6040516001600160a01b03909116815260200161017c565b34801561032457600080fd5b5060975460ff16610170565b34801561033c57600080fd5b5061019861034b3660046115a0565b6109ff565b34801561035c57600080fd5b50610198610a88565b34801561037157600080fd5b50610170610380366004611529565b610ab8565b34801561039157600080fd5b506101ca6103a0366004611529565b610ae3565b3480156103b157600080fd5b506101986103c03660046114e4565b610b2c565b3480156103d157600080fd5b506101ca600081565b3480156103e657600080fd5b5060cc54610300906001600160a01b031681565b34801561040657600080fd5b5060c954610300906001600160a01b031681565b34801561042657600080fd5b506103006104353660046113fe565b60cb602052600090815260409020546001600160a01b031681565b34801561045c57600080fd5b5061019861046b366004611529565b610c10565b34801561047c57600080fd5b5061019861048b3660046115cc565b610c36565b60006001600160e01b03198216637965db0b60e01b14806104c157506301ffc9a760e01b6001600160e01b03198316145b92915050565b60975460ff16156104f35760405162461bcd60e51b81526004016104ea90611639565b60405180910390fd5b600083815260cb60205260409020546001600160a01b03168061052957604051634325fa6b60e11b815260040160405180910390fd5b60cd546040516323b872dd60e01b8152336004820152306024820152604481018790526001600160a01b03909116906323b872dd90606401600060405180830381600087803b15801561057b57600080fd5b505af115801561058f573d6000803e3d6000fd5b505060cd54604051630852cd8d60e31b8152600481018990526001600160a01b0390911692506342966c689150602401600060405180830381600087803b1580156105d957600080fd5b505af11580156105ed573d6000803e3d6000fd5b505060cc54604080516001600160a01b039283168152602081018a9052918a1693503392507f2fc3848834aac8e883a2d2a17a7514dc4f2d3dd268089df9b9f5d918259ef3b0910160405180910390a36106686040518060800160405280600081526020016000815260200160608152602001606081525090565b602081015161067990600180610f6e565b6020820181905261068d9060026001610f6e565b6020828101919091528382526040516001600160601b0319606087901b169181019190915260340160408051601f1981840301815291815282810191909152516001600160a01b038816602482015260606044820152600060848201526064810187905260a40160408051601f19818403018152918152602080830180516001600160e01b0316636b96748760e11b179052606084019290925260c95490516001600160a01b039091169163be29747691349160009183918b91610766918a910160609190911b6001600160601b031916815260140190565b6040516020818303038152906040526000808960405160200161078991906116bf565b6040516020818303038152906040526040518963ffffffff1660e01b81526004016107ba9796959493929190611715565b6000604051808303818588803b1580156107d357600080fd5b505af11580156107e7573d6000803e3d6000fd5b505050505050505050505050565b610800600033610ab8565b61081d57604051636f4720fd60e11b815260040160405180910390fd5b600081815260ca602052604090819020905161083a90849061178b565b9081526040519081900360200190205460ff161561086b57604051631b42558760e21b815260040160405180910390fd5b600160ca60008381526020019081526020016000208360405161088e919061178b565b908152604051908190036020018120805492151560ff19909316929092179091557f75444ea1b32c6bc7d5884fdd431cab59bc347958a5a88eb42c31b1cd833f4c79906108e190849084906001906117a7565b60405180910390a15050565b6000828152606560205260409020600101546109098133610f92565b6109138383610ff6565b505050565b6001600160a01b03811633146109885760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016104ea565b610992828261107c565b5050565b6109a1600033610ab8565b6109be57604051636f4720fd60e11b815260040160405180910390fd5b6109c66110e3565b565b600081815260ca602052604080822090516109e490859061178b565b9081526040519081900360200190205460ff16905092915050565b610a0a600033610ab8565b610a2757604051636f4720fd60e11b815260040160405180910390fd5b600081815260cb602090815260409182902080546001600160a01b0319166001600160a01b03861690811790915582519081529081018390527f97eb0846ca97e409f9879b45a795fe55abf0dabdcf54c2bc4eaa07c14221195a91016108e1565b610a93600033610ab8565b610ab057604051636f4720fd60e11b815260040160405180910390fd5b6109c6611176565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60008282604051602001610b0e92919091825260601b6001600160601b031916602082015260340190565b60405160208183030381529060405280519060200120905092915050565b610b37600033610ab8565b610b5457604051636f4720fd60e11b815260040160405180910390fd5b600081815260ca6020526040908190209051610b7190849061178b565b9081526040519081900360200190205460ff16610ba1576040516336a2b46360e11b815260040160405180910390fd5b600081815260ca60205260408082209051610bbd90859061178b565b908152604051908190036020018120805492151560ff19909316929092179091557f75444ea1b32c6bc7d5884fdd431cab59bc347958a5a88eb42c31b1cd833f4c79906108e190849084906000906117a7565b600082815260656020526040902060010154610c2c8133610f92565b610913838361107c565b60c95460408051630b69a22b60e21b815290516000926001600160a01b031691632da688ac916004808301926020929190829003018186803b158015610c7b57600080fd5b505afa158015610c8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb391906117d1565b90506001600160a01b0381163314610cde576040516324439f6760e21b815260040160405180910390fd5b6000816001600160a01b0316632eb484916040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610d1b57600080fd5b505af1158015610d2f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d5791908101906117ee565b90506000826001600160a01b031663508ab0a06040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610d9657600080fd5b505af1158015610daa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dce919061185c565b905060ca600082815260200190815260200160002082604051610df1919061178b565b9081526040519081900360200190205460ff16610e25578181604051630792ddd560e11b81526004016104ea929190611875565b60975460ff1615610e485760405162461bcd60e51b81526004016104ea90611639565b6001600160a01b038616610e9e5760405162461bcd60e51b815260206004820181905260248201527f546f6b656e2063616e6e6f7420626520746865207a65726f206164647265737360448201526064016104ea565b60cd546040516340c10f1960e01b81526001600160a01b03888116600483015260248201879052909116906340c10f1990604401600060405180830381600087803b158015610eec57600080fd5b505af1158015610f00573d6000803e3d6000fd5b50505050856001600160a01b031685604051610f1c919061178b565b60405190819003812060cc5487835290916001600160a01b03909116907f446cb21a5a87b0b9b961eb4bb0b800e29accb236e438a2bc207ac4631a40c0959060200160405180910390a4505050505050565b60008115610f8257506001821b8317610f8b565b506001821b1983165b9392505050565b610f9c8282610ab8565b61099257610fb4816001600160a01b031660146111ce565b610fbf8360206111ce565b604051602001610fd0929190611897565b60408051601f198184030181529082905262461bcd60e51b82526104ea9160040161190c565b6110008282610ab8565b6109925760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556110383390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6110868282610ab8565b156109925760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60975460ff1661112c5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016104ea565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60975460ff16156111995760405162461bcd60e51b81526004016104ea90611639565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586111593390565b606060006111dd836002611935565b6111e8906002611954565b67ffffffffffffffff81111561120057611200611417565b6040519080825280601f01601f19166020018201604052801561122a576020820181803683370190505b509050600360fc1b816000815181106112455761124561196c565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106112745761127461196c565b60200101906001600160f81b031916908160001a9053506000611298846002611935565b6112a3906001611954565b90505b600181111561131b576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106112d7576112d761196c565b1a60f81b8282815181106112ed576112ed61196c565b60200101906001600160f81b031916908160001a90535060049490941c9361131481611982565b90506112a6565b508315610f8b5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104ea565b60006020828403121561137c57600080fd5b81356001600160e01b031981168114610f8b57600080fd5b6001600160a01b03811681146113a957600080fd5b50565b600080600080600060a086880312156113c457600080fd5b85356113cf81611394565b9450602086013593506040860135925060608601356113ed81611394565b949793965091946080013592915050565b60006020828403121561141057600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561145657611456611417565b604052919050565b600067ffffffffffffffff82111561147857611478611417565b50601f01601f191660200190565b60006114996114948461145e565b61142d565b90508281528383830111156114ad57600080fd5b828260208301376000602084830101529392505050565b600082601f8301126114d557600080fd5b610f8b83833560208501611486565b600080604083850312156114f757600080fd5b823567ffffffffffffffff81111561150e57600080fd5b61151a858286016114c4565b95602094909401359450505050565b6000806040838503121561153c57600080fd5b82359150602083013561154e81611394565b809150509250929050565b6000806040838503121561156c57600080fd5b82359150602083013567ffffffffffffffff81111561158a57600080fd5b611596858286016114c4565b9150509250929050565b600080604083850312156115b357600080fd5b82356115be81611394565b946020939093013593505050565b6000806000606084860312156115e157600080fd5b83356115ec81611394565b9250602084013567ffffffffffffffff81111561160857600080fd5b8401601f8101861361161957600080fd5b61162886823560208401611486565b925050604084013590509250925092565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60005b8381101561167e578181015183820152602001611666565b8381111561168d576000848401525b50505050565b600081518084526116ab816020860160208601611663565b601f01601f19169290920160200192915050565b60208152815160208201526020820151604082015260006040830151608060608401526116ef60a0840182611693565b90506060840151601f1984830301608085015261170c8282611693565b95945050505050565b600061010060018060a01b038a16835288602084015287604084015280606084015261174381840188611693565b90508281038060808501526000825286151560a085015263ffffffff861660c08501526020810160e08501525061177d6020820185611693565b9a9950505050505050505050565b6000825161179d818460208701611663565b9190910192915050565b6060815260006117ba6060830186611693565b602083019490945250901515604090910152919050565b6000602082840312156117e357600080fd5b8151610f8b81611394565b60006020828403121561180057600080fd5b815167ffffffffffffffff81111561181757600080fd5b8201601f8101841361182857600080fd5b80516118366114948261145e565b81815285602083850101111561184b57600080fd5b61170c826020830160208601611663565b60006020828403121561186e57600080fd5b5051919050565b6040815260006118886040830185611693565b90508260208301529392505050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516118cf816017850160208801611663565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351611900816028840160208801611663565b01602801949350505050565b602081526000610f8b6020830184611693565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561194f5761194f61191f565b500290565b600082198211156119675761196761191f565b500190565b634e487b7160e01b600052603260045260246000fd5b6000816119915761199161191f565b50600019019056fea26469706673582212201d554d191a14d8103b5464a2b7ba411144dd0a44fd33f9f888e1e8d0188037df64736f6c63430008090033",
  "devdoc": {
    "author": "OnBridge IO*",
    "details": "This contract deployed on secondary network with Bridged token contract - upon `finalizeInboundTransfer` call from oracle, it mints corresponding amount of tokens on Layer 2 network - upon `outboundTransfer` call from token holder it withdraws and burns L2 the requested token",
    "kind": "dev",
    "methods": {
      "finalizeInboundTransfer(address,string,uint256)": {
        "params": {
          "_id": "Token id being deposited",
          "_l1Tx": "Tx hash of `L1Bridge.outboundTransfer` on L1 side",
          "_to": "L2 address of destination"
        }
      },
      "getChainId()": {
        "details": "Get current chain id"
      },
      "getDebridgeId(uint256,address)": {
        "details": "Calculates asset identifier.",
        "params": {
          "_chainId": "Current chain id.",
          "_tokenAddress": "Address of the asset on the other chain."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "outboundTransfer(address,uint256,uint256,address,uint256)": {
        "params": {
          "_id": "Token id being withdrawn",
          "_to": "L1 address of destination"
        }
      },
      "pause()": {
        "details": "Stop all transfers."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "unpause()": {
        "details": "Allow transfers."
      }
    },
    "title": "Bridge Layer 2 contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "finalizeInboundTransfer(address,string,uint256)": {
        "notice": "Finalizes a deposit from L1 to L2"
      },
      "outboundTransfer(address,uint256,uint256,address,uint256)": {
        "notice": "Initiates a withdrawal from L2 to L1; callable by any tokenholder."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 416,
        "contract": "contracts/L2Bridge.sol:L2Bridge",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 419,
        "contract": "contracts/L2Bridge.sol:L2Bridge",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 884,
        "contract": "contracts/L2Bridge.sol:L2Bridge",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1133,
        "contract": "contracts/L2Bridge.sol:L2Bridge",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 48,
        "contract": "contracts/L2Bridge.sol:L2Bridge",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)"
      },
      {
        "astId": 335,
        "contract": "contracts/L2Bridge.sol:L2Bridge",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 504,
        "contract": "contracts/L2Bridge.sol:L2Bridge",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 595,
        "contract": "contracts/L2Bridge.sol:L2Bridge",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3451,
        "contract": "contracts/L2Bridge.sol:L2Bridge",
        "label": "deBridgeGate",
        "offset": 0,
        "slot": "201",
        "type": "t_contract(IDeBridgeGate)4911"
      },
      {
        "astId": 3458,
        "contract": "contracts/L2Bridge.sol:L2Bridge",
        "label": "isAddressFromChainIdControlling",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_uint256,t_mapping(t_bytes_memory_ptr,t_bool))"
      },
      {
        "astId": 3463,
        "contract": "contracts/L2Bridge.sol:L2Bridge",
        "label": "chainIdToContractAddress",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 4177,
        "contract": "contracts/L2Bridge.sol:L2Bridge",
        "label": "l1Token",
        "offset": 0,
        "slot": "204",
        "type": "t_contract(IERC721)2458"
      },
      {
        "astId": 4180,
        "contract": "contracts/L2Bridge.sol:L2Bridge",
        "label": "l2Token",
        "offset": 0,
        "slot": "205",
        "type": "t_contract(IERC721Bridged)4168"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IDeBridgeGate)4911": {
        "encoding": "inplace",
        "label": "contract IDeBridgeGate",
        "numberOfBytes": "20"
      },
      "t_contract(IERC721)2458": {
        "encoding": "inplace",
        "label": "contract IERC721",
        "numberOfBytes": "20"
      },
      "t_contract(IERC721Bridged)4168": {
        "encoding": "inplace",
        "label": "contract IERC721Bridged",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)43_storage"
      },
      "t_mapping(t_bytes_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_mapping(t_bytes_memory_ptr,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(bytes => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes_memory_ptr,t_bool)"
      },
      "t_struct(RoleData)43_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 40,
            "contract": "contracts/L2Bridge.sol:L2Bridge",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 42,
            "contract": "contracts/L2Bridge.sol:L2Bridge",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}